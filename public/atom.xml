<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[smknstd.io]]></title>
  <link href="http://mlnstd.io/atom.xml" rel="self"/>
  <link href="http://mlnstd.io/"/>
  <updated>2013-10-28T12:46:51+01:00</updated>
  <id>http://mlnstd.io/</id>
  <author>
    <name><![CDATA[smknstd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Survivre aux caractères non-imprimables]]></title>
    <link href="http://mlnstd.io/2013/10/22/non-printing-characters/"/>
    <updated>2013-10-22T23:56:00+02:00</updated>
    <id>http://mlnstd.io/2013/10/22/non-printing-characters</id>
    <content type="html"><![CDATA[<p>Lorsqu&#8217;on manipule des données, on se heurte bien souvent à des subtilités comme l&#8217;encodage des caracteres. Si souvent d&#8217;ailleurs, que s&#8217;en méfier devient un atomatisme, voir une seconde nature. Par contre, une subtilité à laquelle je n&#8217;ai jamais pu m&#8217;habituer sont bien les caractères <a href="http://en.wikipedia.org/wiki/Control_character">non imprimables</a>. En théorie bien sûr ces caractère ne sont pas sensé être très genant. Malheuresement dans la pratique, j&#8217;ai pu me rendre compte que de nombreuses applications ont tendance à produire des comportements anormaux à leur encontre. Le plus dur est peut être de les identifier, et ceci est le meilleur moyen que j&#8217;ai trouvé pour le faire.</p>

<p>Voici un exemple d&#8217;une chaine de caractère à l&#8217;origine d&#8217;un comportement anormal d&#8217;un programme:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;  sqlplus -l -s user/password@INSTANCE @test.sql | cat
</span><span class='line'>REVISION DES PRIX 2011 coef 1.107138
</span><span class='line'>reçu le 22/07/2011 mis en application le
</span><span class='line'>22/08/2011 (retour congé)</span></code></pre></td></tr></table></div></figure>


<p>A première vu, rien de remarquable. Heuresement, par miracle, un <a href="http://en.wikipedia.org/wiki/Od_%28Unix%29">outil</a> peut m&#8217;aider en imprimant à l&#8217;écran l&#8217;imprimable !</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;  sqlplus -l -s user/password@INSTANCE @test.sql | od -bc
</span><span class='line'>
</span><span class='line'>0000000 122 105 126 111 123 111 117 116 040 104 105 123 040 120 122 111
</span><span class='line'>          R   E   V   I   S   I   O   N       D   E   S       P   R   I
</span><span class='line'>0000020 130 040 062 060 061 061 040 143 157 145 146 040 061 056 061 060
</span><span class='line'>          X       2   0   1   1       c   o   e   f       1   .   1   0
</span><span class='line'>0000040 067 061 063 070 015 012 162 145 347 165 040 154 145 040 062 062
</span><span class='line'>          7   1   3   8  \r  \n   r   e 347   u       l   e       2   2
</span><span class='line'>0000060 057 060 067 057 062 060 061 061 040 155 151 163 040 145 156 040
</span><span class='line'>          /   0   7   /   2   0   1   1       m   i   s       e   n
</span><span class='line'>0000100 141 160 160 154 151 143 141 164 151 157 156 040 154 145 012 062
</span><span class='line'>          a   p   p   l   i   c   a   t   i   o   n       l   e  \n   2
</span><span class='line'>0000120 062 057 060 070 057 062 060 061 061 040 050 162 145 164 157 165
</span><span class='line'>          2   /   0   8   /   2   0   1   1       (   r   e   t   o   u
</span><span class='line'>0000140 162 040 143 157 156 147 351 051 015 012 012
</span><span class='line'>          r       c   o   n   g 351   )  \r  \n  \n
</span><span class='line'>0000153</span></code></pre></td></tr></table></div></figure>


<p>Tout devient plus clair! Bien sûr, une fois qu&#8217;on le sait, il y&#8217;a d&#8217;<a href="http://www.thelinuxtips.com/tag/cat-v-command/">autres</a> <a href="http://stackoverflow.com/questions/6943928/show-special-characters-in-unix-while-using-less-command">moyens</a> de les afficher et la présence de ces caracteres devient presque évidente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;  sqlplus -l -s user/password@INSTANCE @test.sql | cat -v
</span><span class='line'>REVISION DES PRIX 2011 coef 1.107138^M
</span><span class='line'>reM-gu le 22/07/2011 mis en application le
</span><span class='line'>22/08/2011 (retour congM-i)^M</span></code></pre></td></tr></table></div></figure>


<p>&#8220;od&#8221; (et ses options de détails caractère par caractère) est pour moi un outils extrement utile si ce n&#8217;est irremplacable dès lors qu&#8217;on manipule des chaines de caracteres. Le connaissiez-vous ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extraction Oracle massive en //: la methode de lecture partitionnée]]></title>
    <link href="http://mlnstd.io/2013/09/12/oracle-partitionned-read/"/>
    <updated>2013-09-12T23:58:00+02:00</updated>
    <id>http://mlnstd.io/2013/09/12/oracle-partitionned-read</id>
    <content type="html"><![CDATA[<p>Un avantage de travailler avec Oracle est bien sûr de bénéficier des outils proposés par l&#8217;éditeur. La gestion des executions de tâche en <a href="http://docs.oracle.com/cd/E11882_01/server.112/e25523/parallel002.htm">parallèle</a> est à mon avis indispensable. D&#8217;autres  <a href="http://docs.oracle.com/cd/E11882_01/appdev.112/e25788/d_parallel_ex.htm">outils</a> plus méconnus existent. Toutefois certains besoins sortent des cas d&#8217;utilisation prévus. Quand on souhaite traiter massivement des données issus d&#8217;Oracle, pour les traiter en //, l&#8217;opération d&#8217;extraction des données en un seul bloc peut représenter une goulot d&#8217;etranglement. La méthode décrite ici propose d&#8217;accélerer le processus d&#8217;extraction d&#8217;une table Oracle pour un traitement des données en //.</p>

<h2>La stratégie</h2>

<p>Au lieu d&#8217;extraire toutes les données d&#8217;une table au travers d&#8217;une seule et unique connexion, puis dans un deuxieme temps de partitionner les données. L&#8217;idée consiste à extraire simultanement des différentes parties de la table depusi des connexions différentes. Même si ces connexions concurrentes peuvent être effectuée depuis une même machine, un avantage important est qu&#8217;il est possible d&#8217;effectuer ces connexions depuis des machines distinctes.</p>

<p>Voici une représentation schématique d&#8217;un exemple concret d&#8217;un contexte dans lequel j&#8217;ai pu appliquer ce principe avec succès: le traitement de données s&#8217;effectue dans un cluster de 4 machines.</p>

<p><img src="http://mlnstd.io/images/oracle_avant_apres.png" title="schema" alt="photo_blocnote" /></p>

<h2>La construction des requètes</h2>

<p>Pour procéder, je me suis largement inspiré des autres outils procedant en // et notemment de cet etonnant <a href="http://www.jlcomp.demon.co.uk/big_upd.html">article</a> traitant d&#8217;une problématique proche et liée au <a href="http://en.wikipedia.org/wiki/Year_2000_problem">bug de l&#8217;an 2000</a> !? Autrement dit, la methode se base sur la structure avantageuse du champ ROWID (Même si le principe reste le même dans toutes les versions, les details de l&#8217;explication suivante sont valable pour les versions 10 et 11), qu&#8217;on va utiliser pour créer autant de plages de ROWID qu&#8217;on a besoin de faire de partitions.</p>

<p>Voici un extrait de la documentation officielle:</p>

<p>`An extended rowid has a four-piece format, OOOOOOFFFBBBBBBRRR:</p>

<pre><code>OOOOOO: The data object number that identifies the database segment (AAAAao in the example). Schema objects in the same segment, such as a cluster of tables, have the same data object number.

FFF: The tablespace-relative datafile number of the datafile that contains the row (file AAT in the example).

BBBBBB: The data block that contains the row (block AAABrX in the example). Block numbers are relative to their datafile, not tablespace. Therefore, two rows with identical block numbers could reside in two different datafiles of the same tablespace.

RRR: The row in the block.`
</code></pre>

<p>En se servant du catalogue systeme de l&#8217;instance, il est possible pour la table donnée, d&#8217;identifier le ou les &#8220;Datafiles&#8221;, puis les groupes de &#8220;blocks&#8221; qu&#8217;elle occupe. A partir de ces informations, on va pouvoir estimer comment sont réparties les données et surtout essayer de découper des groupes de blocks pour répartir le mieux possible les données Autrement dit equitablement entre les partitions.</p>

<p>On peut lister l&#8217;identifiant de l&#8217;objet de cette manière:</p>

<p><code>SELECT DATA_OBJECT_ID FROM DBA_OBJECTS WHERE OWNER = 'USER1' AND OBJECT_NAME = 'TABLE1'</code></p>

<p>On peut lister les Datafiles concernés par les données de la table de cette manière:</p>

<p><code>SELECT DISTINCT FILE_ID FROM DBA_EXTENTS WHERE SEGMENT_NAME='TABLE1' AND SEGMENT_TYPE='TABLE'</code></p>

<p>On peut lister les différents &#8220;extents&#8221; concernés par les données de la table de cette manière:</p>

<p><code>SELECT BLOCK_ID, BLOCKS FROM DBA_EXTENTS WHERE SEGMENT_NAME='TABLE1' AND SEGMENT_TYPE='TABLE'</code></p>

<p>Pour la construction de la limite inferieure d&#8217;une plage de ROWID,  on se content d&#8217;un numéro de block fourni par le catalogue (BLOCK_ID) et on renseigne le numero de ligne par la valeur la plus faible possible : &#8220;AAA&#8221;.</p>

<p>Pour la construction de la limite supérieur, il faut calculer le numero du dernier block à partir de la taille fournie par le catalogue (BLOCKS) et on renseigne le numéro de ligne par la valeur de la derniere ligne. En théorie cette dernière information n&#8217;est pas si facile à deviner, car le nombre de lignes dans un block dépend de plusieurs facteurs:
- la taille du block
- la taille des lignes
- certains parametres comme PCTFREE qui définissent la taille reservée (pour une possible extension)</p>

<p>On peut déterminer la taille des blocks de cette manière:</p>

<p><code>SELECT VALUE FROM V$PARAMETER WHERE NAME LIKE 'DB_BLOCK_SIZE'</code>
Pour moi le plus simple consiste a renseigner la valeur la plus élévée possible. Malheuresement cette valeur théorique n&#8217;est pas bien documentée. Sans pouvoir citer de source, j&#8217;ai utilisé &#8220;H//&#8221;.</p>

<p>Notons bien, que cette méthode profite de plusieurs opportunités:
- bien sûr de la structure du champ ROWID et de son format d&#8217;<a href="http://en.wikipedia.org/wiki/Base64">encodage</a> qui permet non seulement de construire les bornes des plages mais aussi l&#8217;utilisation des opérateurs &#8220;supérieur&#8221; et &#8220;inferieur&#8221; pour chercher à l&#8217;interieur
- le fait que l&#8217;execution de la requete ne soit pas gênée par des identifiants &#8220;ROWID&#8221; manquants</p>

<p>Au final on écrit autant de requete qu&#8217;on souhaite de partitions de données sous la forme suivante:</p>

<p><code>SELECT * FROM TABLE1 WHERE TABLE1.ROWID BETWEEN 'AAARvrAAEAAAAVpAAA' AND 'AAARvrAAEAAAAVuH//' AND (COL1 &gt; 10)</code></p>

<h2>Quelques variantes</h2>

<p>On peut imaginer partager les données de la table en partitions plus simplement, en parcourant pour chaque requete toute la table mais en se contentant de garder qu&#8217;une partie des données. Evidemment, ce mechanisme se ressentirait directement au niveau des performances.</p>

<p><code>SELECT * FROM TABLE1 WHERE MOD(DBMS_ROWID.ROWID_ROW_NUMBER(TABLE1.ROWID), 4) = 0 AND COL1 &gt; 10</code></p>

<p>Si on dispose de tables partitionnées, alors il est tout a fait imaginable tirer profit des ces partitions en ecrivant des requetes du type:</p>

<p><code>SELECT * FROM TABLE1 PARTITION(PART1) WHERE COL1 &gt; 10</code></p>

<h2>Les limites</h2>

<ol>
<li><p>Cette methode n&#8217;a d&#8217;interet que si l&#8217;on n&#8217;a aucune exigence sur la répartition des données entre les différentes partitions. En effet les données ne sont réparties dans les blocks selon aucun critère particulier. S&#8217;il est necessaire de regrouper les données d&#8217;une quelqonque manière (date, clef, hash, etc) cette methode devient immédiatement inutile ou alors d&#8217;un interet très limité puisqu&#8217;il serait necessaire de rassembler les données.</p></li>
<li><p>Cette methode est reservée à des extractions basiques et n&#8217;est bien evidemment pas possible sur des requetes effectuant des jointures entre plusieurs tables ou des opérations de groupement. Par ailleurs des filtres sur les données elle-mêmes sont possibles.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Votre mot de passe est-il trop simple ?]]></title>
    <link href="http://mlnstd.io/2013/05/19/hiding-yourself/"/>
    <updated>2013-05-19T14:59:00+02:00</updated>
    <id>http://mlnstd.io/2013/05/19/hiding-yourself</id>
    <content type="html"><![CDATA[<p>Qui n&#8217;a pas été victime de la <a href="http://en.wikipedia.org/wiki/Password_fatigue">&#8220;fatigue des mots de passe&#8221;</a> ? Je sais bien que les <a href="http://en.wikipedia.org/wiki/Password_manager">Gestionnaires de mots de passe</a> présentent des avantages mais je n&#8217;ai jamais pu me faire à leur defauts. Sans aucune prétention, je vais vous décrire ma facon de retenir facilement un mot de passe unique et complexe pour chaque service que j&#8217;utilise sur internet avec une seule règle et d&#8217;éviter l&#8217;<a href="http://www.codinghorror.com/blog/2009/05/i-just-logged-in-as-you.html">effroyable</a>!</p>

<p>Mon astuce n&#8217;est qu&#8217;une variante très simple du <a href="http://en.wikipedia.org/wiki/Caesar_cipher">chiffrement par décalage</a>, que j&#8217;ai imaginé en regardant un épisode de  <a href="http://en.wikipedia.org/wiki/The_Wire">&#8220;sur écoute&#8221;</a>. Dans la série, les hommes de main de <a href="http://en.wikipedia.org/wiki/Stringer_Bell">Stringer Bell</a> s&#8217;échangent des numéros de téléphone  par <a href="http://en.wikipedia.org/wiki/Pager">pagers</a>. Ces numéros sont échangés de manière codée, ainsi si le message est intercepté par la police, il ne menera à rien. Dans un souci de commodité, les opérations de cryptage et de décryptage ont été simplifiées: elle se font sans algorithme mathématique mais simplement par une sorte de <a href="http://en.wikipedia.org/wiki/Point_reflection">symétrie</a> appliquée à la disposition d&#8217;un clavier de numérotation téléphonique, et donc très facile à appliquer et à retenir. <em>#NOBRAINER</em></p>

<p>&#8220;if it was a code that involves math, algebra or whatever, these littles yos in the project wouldn&#8217;t be able to follow along. Ain&#8217;t no math to it. It&#8217;s just&#8230; how the phone looks when you look at it.&#8221;</p>

<p><img src="http://mlnstd.io/images/thewire.png" title="Avon Barksdale's hint on hinding himself" alt="the wire screencap" /></p>

<p>Pour être capable de mémoriser mes mots de passes, j&#8217;ai librement adapté cette idée aux claviers <a href="http://en.wikipedia.org/wiki/AZERTY">AZERTY</a> que j&#8217;utilise la plupart du temps. Evidemment pour que le mot de passe de chaque service soit unique, il faut intégrer un élément propre: le nom du service evidemment ! Ainsi je transpose chaque lettre du nom d&#8217;un service, et elle devient la lettre suivante selon le sens des 3 lignes du clavier (en minuscule). <code>A</code> devient <code>Z</code>, <code>Z</code> devient <code>E</code>, <code>P</code> devient <code>Q</code>, <code>N</code> devient <code>A</code>, etc. Eventuellement il est possible de faire pareil avec les chiffres: <code>1</code> devient <code>2</code>, <code>2</code> devient <code>3</code>, <code>0</code> devient <code>1</code>, etc. Cette façon de faire est facile à mémoriser et à appliquer. #WIN</p>

<p>Aussi pour rendre plus robuste chacun des mots de passe (longeur, majuscules, caracteres spéciaux, etc), je rajoute un &#8220;radical&#8221; commun à tous les mots de passes. Finalement en n&#8217;ayant besoin de retenir que celui-ci, j&#8217;obtiens sans effort, des mots de passe uniques (suffisamment longs et complexes) pour chaque service et surtout dont la reversibilité n&#8217;est pas triviale.</p>

<p>Par exemple si mon radical était <code>!m0nR4d_Cal</code>, cela donnerait:</p>

<ul>
<li><code>!m0nR4d_Caldyzvlpbrtgmpx</code> pour me connecter à stackoverflow.com</li>
<li><code>!m0nR4d_Calyxoyyrt</code> pour me connecter à twitter.com</li>
</ul>


<p><em>J&#8217;ai bien pris soin de finir mon radical par des lettres en minuscule, ainsi l&#8217;analogie entre le nom du service et une partie du mot de passe est plus difficile à faire que quelquechose comme <code>MONRADICALyxoyyrt</code>)</em></p>

<p>Cette méthode n&#8217;est pas parfaite et n&#8217;est qu&#8217;un compromis, d&#8217;ailleurs dans l&#8217;épisode de la série dont je me suis inspiré, <a href="http://en.wikipedia.org/wiki/Roland_Pryzbylewski">&#8220;Prezbo&#8221;</a> déjoue assez facilement le stratagème, probablement parcequ&#8217;il a pu récupérer plusieurs numéros différents et procéder par <a href="http://en.wikipedia.org/wiki/Analogy">analogie</a>. Evidemment je considère que la probabilité que quelqu&#8217;un récupère plusieurs de mes mots de passe (et se donne la peine de retrouver ma facon de faire) est assez faible pour continuer à utiliser cette technique. Aussi par prudence, je l&#8217;exclus pour les services dont j&#8217;éstime la sécurité critique (compte mail, paypal, dropbox etc).</p>

<h4>Ressources</h4>

<ul>
<li><a href="http://www.wired.com/politics/security/commentary/securitymatters/2006/12/72300?currentPage=all">article de 2006</a> dans lequel Bruce Schneier révèle qu&#8217;un des mots de passe les plus courants sur myspace était &#8220;Blink182&#8221;</li>
<li><a href="http://www.amazon.fr/Perfect-Password-Selection-Protection-Authentication/dp/1597490415">182 pages</a> sur le sujet !?</li>
<li><a href="http://www.passwordmeter.com/">password strength meter</a></li>
<li><a href="https://www.grc.com/haystack.htm">how big is your haystack</a></li>
<li><a href="http://stackoverflow.com/questions/98768/should-i-impose-a-maximum-length-on-passwords">WTF</a> !?</li>
<li><a href="http://en.wikipedia.org/wiki/Three_Days_of_the_Condor">un film</a> que j&#8217;aime beaucoup :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuces pour une commande 'prompt' utile]]></title>
    <link href="http://mlnstd.io/2013/04/29/hello-world3/"/>
    <updated>2013-04-29T08:46:00+02:00</updated>
    <id>http://mlnstd.io/2013/04/29/hello-world3</id>
    <content type="html"><![CDATA[<p>Vous aimez votre terminal ? moi aussi. Comme j&#8217;y passe souvent beaucoup trop de temps, j&#8217;ai découvert au cours du temps quelques astuces bien utiles. J&#8217;aurai aimé citer les sources de cette note, et rendre à Caesar ce qui est à Caesar, mais <a href="http://blog.chron.com/techblog/files/2013/03/googlereaderrip_thumb.jpg">désormais</a> je ne sais plus rechercher correctement dans mes fils rss. :(</p>

<h2>Votre terminal supporte l&#8217;unicode</h2>

<p>Très utile pour personnaliser l&#8217;invite et retranscrire des informations complexes avec des pictogrammes. Le rappel de modification git decrit plsu bas est un bon exemple, mais je suis persuadé qu&#8217;il y a bien d&#8217;autres cas d&#8217;utilisatioon possible parmis le <a href="http://goetter.fr/unicode/">panel</a> disponible.</p>

<h2>Something went wrong : RED ALERT</h2>

<p>Quand on a fini d&#8217;executer une commande, on peut bien sûr intérroger son code retour, mais il est beaucoup plus simple de récupérer automatiquement cette information et l&#8217;afficher avec un code couleur ! Très simple et pourtant diablement efficace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">COLOR_RED</span><span class="o">=</span><span class="s2">&quot;\[\e[0;31m\]&quot;</span>
</span><span class='line'><span class="nv">COLOR_NONE</span><span class="o">=</span><span class="s2">&quot;\[\e[0m\]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if </span><span class="nb">test</span> <span class="nv">$?</span> -eq 0
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;${prompt}➔ &quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;${prompt}${COLOR_RED}➔${COLOR_NONE} &quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Afficher la branche courante</h2>

<p>J&#8217;aime GIT. Mais je fais des erreurs. Afficher le nom de la branche courante des qu&#8217;on se place dans un repository peut eviter bien des problèmes. Honetement, je ne peux plus m&#8217;en passer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">prompt</span><span class="o">=</span><span class="s2">&quot;\w$(__git_ps1)&quot;</span><span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>N&#8217;oubliez plus de commiter</h2>

<p>Avez vous déjà quitter un repository avec des modifications non commitées ? Voici un moyen de ne plus le faire. On affiche en permanence l&#8217;etat (avec un pictogramme unicode !): infaillible !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git status 2&gt; /dev/null | grep -c : | awk <span class="s1">&#39;{if ($1 &gt; 0) print &quot;⚡&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>retourner à la racine du repository courant</h2>

<p>Toutes les projets n&#8217;ont pas des raborescences interminables, mais ce petit raccourci peut être utile, j&#8217;en suis sûr.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span>git-root<span class="o">=</span><span class="s1">&#39;cd $(git rev-parse --show-toplevel)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Liens utiles</h4>

<ul>
<li>probably the most useful <a href="http://mywiki.wooledge.org/BashPitfalls">page</a> about bash on the whole internet</li>
<li>pretty interesting <a href="http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/">interview</a></li>
<li><a href="http://stackoverflow.com/questions/957928/is-there-a-way-to-get-to-the-git-root-directory-in-one-command">stackoverflow</a>&#8217;s always right</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://mlnstd.io/2013/02/10/hello-world/"/>
    <updated>2013-02-10T00:19:00+01:00</updated>
    <id>http://mlnstd.io/2013/02/10/hello-world</id>
    <content type="html"><![CDATA[<p>Bienvenue à tous. Vous etes sur mon blog. Qui est surtout un pretexte pour essayer &#8220;octopress&#8221;. Un outil très pratique qui permet de générer des pages statiques, ce qui a tellement d&#8217;avantages que je ne saurai pas tous les citer (et peut être quelques <a href="http://liquidmarkup.org">limites</a> malgré tout).</p>

<p>J&#8217;aime le <a href="http://jessicahische.is/monkeyingaround">souci</a> du <a href="http://www.creads.org/blog/logos/le-logo-sncf-a-eu-le-droit-a-un-lifting/">détails</a>, alors si quelquechose ne va pas, n&#8217;hesitez pas à me corriger en m&#8217;envoyant un email. Je ne suis pas sur twitter, j&#8217;avais bien un compte mais c&#8217;était avant l&#8217;ère des applications &#8220;mobile&#8221;, quand les messages étaient encore envoyés par <a href="https://www.youtube.com/watch?v=IGcAYSeN7E4">SMS</a>. #LOL</p>

<p>A bientôt.</p>
]]></content>
  </entry>
  
</feed>
