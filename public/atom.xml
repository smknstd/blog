<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[smknstd.io]]></title>
  <link href="http://www.smknstd.io/atom.xml" rel="self"/>
  <link href="http://www.smknstd.io/"/>
  <updated>2014-03-04T23:16:43+01:00</updated>
  <id>http://www.smknstd.io/</id>
  <author>
    <name><![CDATA[smknstd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim VS Sublime Text: ajout d'un numéro de séquence]]></title>
    <link href="http://www.smknstd.io/2013/11/30/vimvssublime/"/>
    <updated>2013-11-30T19:12:00+01:00</updated>
    <id>http://www.smknstd.io/2013/11/30/vimvssublime</id>
    <content type="html"><![CDATA[<p>Quand vient la question de choisir son éditeur de texte, la discussion pour un développeur peut vite devenir <a href="https://en.wikipedia.org/wiki/Editor_war">passionnelle</a>
. Loin de moi l&#8217;idée dans cet article de vouloir convertir quiconque de changer d&#8217;éditeur, par contre si je m&#8217;écoutais j&#8217;en déconseillerais certains :( Dans cet article je souhaite comparer l&#8217;ajout d&#8217;une séquence dans mes deux éditeurs préférés.</p>

<p>Modifier le formatage ne pose jamais tant de problèmes et je sais facilement ajouter un numéro de séquence en début de ligne, avec une commande uniligne comme: <code>gawk '{ print NR";"$0 }' exemple.csv</code>. Mais pour des besoins plus spécifiques, j&#8217;aime bien utiliser mon éditeur de texte quand c&#8217;est possible.</p>

<h2>vim</h2>

<p>J&#8217;adore <em>vim</em> (et forcement <em>vi</em> aussi). Honnêtement j&#8217;ai appris à l&#8217;utiliser par obligation plus que par choix en intervenant sur des serveurs distants. Maintenant il est impossible m&#8217;en passer. C&#8217;est un outils fascinant, et toutes les ressources disponibles m&#8217;étonneront toujours. Elles sont souvent une bonne leçon d&#8217;humilité.</p>

<p>Je sais qu&#8217;il existe des <a href="http://vim.wikia.com/wiki/Generating_a_column_of_increasing_numbers">scripts</a> sûrement très pratiques, mais malheureusement, quand j&#8217;utilise cet éditeur je n&#8217;ai pas toujours le luxe de pouvoir ajouter des plugins. Ma méthode pour ajouter un numéro de séquence repose sur deux fonctionnalités géniales :</p>

<ul>
<li>les macros</li>
<li>l&#8217;<a href="https://twitter.com/vcotwdorso/status/1602346985">incrémentation</a> d&#8217;un nombre</li>
</ul>


<p> Voici comment je procède:</p>

<ol>
<li><em>je place le curseur au bon endroit</em></li>
<li><code>i</code> <em>j&#8217;active le mode &#8220;insertion&#8221;</em></li>
<li><code>1</code> <em>je tape le premier numéro de ma séquence (on peut évidemment commencer à 2)</em></li>
<li><code>esc</code> <em>je sors du mode &#8220;insertion&#8221;</em></li>
<li><code>qa</code> <em>j&#8217;active le mode macro et je commence la macro qui s’appelle &#8220;a&#8221;</em></li>
<li><code>x</code> <em>je coupe le nombre sous le curseur pour le récupérer dans le tampon (copier!?)</em></li>
<li><code>p</code> <em>je le recolle aussitôt au même endroit</em></li>
<li><code>j</code> <em>je déplace le curseur à l&#8217;endroit ou je veux dupliquer ma séquence, en l’occurrence à la ligne suivante donc je descend (j est l’équivalent de la flèche vers le bas)</em></li>
<li><code>p</code> <em>je colle le contenu du tampon sous le curseur</em></li>
<li><code>Ctrl+a</code> <em>j&#8217;incrémente le nombre sous le curseur <a href="https://en.wikipedia.org/wiki/Do_You_Believe_in_Magic_%28song%29">#doyoubelieveinmagic</a></em></li>
<li><code>q</code> <em>j&#8217;ai terminé ma macro, je sors donc de ce mode</em></li>
<li><code>10@a</code> <em>je répète autant de fois que nécessaire cette opération (10 dans cet exemple)</em></li>
</ol>


<p>On peut se servir des macros pour dupliquer simplement une chaîne de caractères sur plusieurs lignes comme par exemple <code>INSERT INTO MA_TABLE VALUES (</code>. Mais dans ce cas j&#8217;aime utiliser, une autre fonctionnalité géniale de VIM: le mode visuel !</p>

<p>Pour rajouter un préfixe à mes 10 lignes je peux procéder de la sorte:</p>

<ol>
<li><code>gg</code> <em>pour positionner mon curseur au début du fichier</em></li>
<li><code>Ctrl+v</code><em>pour activer le mode visuel</em></li>
<li><code>10j</code> <em>pour sélectionner les 10 lignes suivantes, mais les autres commandes sont possibles, comme atteindre la dernière ligne par exemple</em></li>
<li><code>I</code> <em>j&#8217;active le mode insertion (avec i en majuscule)</em></li>
<li><code>INSERT INTO MA_TABLE VALUES(</code> <em>je tape mon texte sous le curseur</em></li>
<li><code>esc</code> <em>je sors du mode visuel, ma modification s&#8217;applique à toutes les lignes sélectionnées précédemment</em> <a href="https://www.youtube.com/watch?v=GGXzlRoNtHU">#WIN</a></li>
</ol>


<h2>Sublime Text</h2>

<p>J&#8217;adore <em>Sublime Text</em>. Je ne saurai même pas quoi lui reprocher. Si vous ne le connaissez pas, vous trouverez facilement des tonnes d&#8217;articles intéressants à son sujet. Comme je l&#8217;utilise sur mon poste de travail, je profite des nombreux plugins disponibles. C&#8217;est d&#8217;ailleurs de l&#8217;un d&#8217;eux que j&#8217;aime me servir: <a href="https://github.com/duydao/Text-Pastry">Text Pastry</a>. Souple et puissant, il est aussi incroyablement simple à utiliser.</p>

<p><em>Text Pastry</em>, est entièrement basé sur une des possibilités géniale de Sublime Text: la sélection multiple. Bien sûr il n&#8217;est pas toujours évident de sélectionner exactement ce qu&#8217;on souhaite, mais il y a toujours un moyen astucieux de le faire. Pour moi les deux opérations suivantes suffisent souvent:</p>

<ul>
<li>Add next occurrence of selected text to selection: <code>Ctrl + D</code></li>
<li>Add all occurrences of the selected text to the selection: <code>Alt + F3</code></li>
</ul>


<p>Une fois que toutes les occurrences souhaitées sont sélectionnées, il suffit de faire:</p>

<ol>
<li><code>CMD + Alt + n</code> <em>pour ouvrir l&#8217;invite de commande</em></li>
<li><code>\i1</code> <em>pour générer un numéro de séquence qui démarre à 1</em></li>
</ol>


<p><img src="http://www.smknstd.io/images/sublimetext.gif" title="demo text pastry" alt="demosubt2" /></p>

<p>Enfantin ! En comparant avec la méthode VIM, je trouve que cela permet de bien réaliser combien la possibilité de sélectionner plusieurs zones simultanément est puissante, et peut remplacer des procédures compliquées.</p>

<p>Ce qui est génial, c&#8217;est qu&#8217;à la place d&#8217;une simple séquence, on peut utiliser une liste de chaînes de caractères ou même simplement le <a href="https://en.wikipedia.org/wiki/Clipboard_%28computing%29">presse-papier</a>. Cela offre de belles perspectives, vous ne trouvez pas ?</p>

<h3>Ressources</h3>

<ul>
<li>un <a href="https://github.com/tpope/vim-speeddating">plugin</a> incroyable (avec un nom très drôle) pour vim qui permet d&#8217;incrémenter une date (à condition qu&#8217;elle soit au bon <a href="http://en.wikipedia.org/wiki/ISO_8601">format</a>)</li>
<li>le <a href="http://vim-adventures.com/">tutorial</a> qu&#8217;on ne présente plus</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SASS/Compass pour les nuls]]></title>
    <link href="http://www.smknstd.io/2013/11/21/dummy-sass/"/>
    <updated>2013-11-21T20:03:00+01:00</updated>
    <id>http://www.smknstd.io/2013/11/21/dummy-sass</id>
    <content type="html"><![CDATA[<p>Je suis sûrement loin d&#8217;être un développeur web très expérimenté, pourtant l&#8217;écriture de ma première feuille de style CSS remonte à plus de 15 ans. Depuis ce temps j&#8217;ai bien eut le temps de comprendre que cet outil pouvait vite montrer ses limites, et réussir à organiser et maintenir une CSS fournie demandait des bons outils et beaucoup de discipline pour dire le moins. En modifiant le thème de base d&#8217;octopress, j&#8217;avais enfin l&#8217;occasion de m&#8217;introduire à SASS et Compass. Même sans en faire une utilisation sophistiquée (j&#8217;ai délibérément réduit ce blog à seulement deux pages plutôt basiques), je pense en avoir cerné les principaux avantages.</p>

<h2>Partials</h2>

<p>Quiconque a déjà modifié une feuille de style CSS sait que d&#8217;en organiser le contenu peut vite ressembler à un casse tête. Même avec de la bonne volonté, le résultat ressemble le plus souvent à fichier à rallonge où il est difficile de s&#8217;y retrouver. Bien sûr, il a toujours été possible de s&#8217;organiser en séparant le contenu dans plusieurs feuilles de styles. Mais les combiner sur une même page avec la directive <code>@import</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import url('style.css');</span></code></pre></td></tr></table></div></figure>


<p>ou plusieurs balises <link></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link rel="stylesheet" href="structure.css" media="all"&gt;
</span><span class='line'>&lt;link rel="stylesheet" href="banner.css" media="all"&gt;</span></code></pre></td></tr></table></div></figure>


<p>pose des problèmes évidents de performance de rendu par les navigateurs qui doivent gérer (souvent mal) plusieurs requêtes en //. SASS propose une solution ! On réparti notre code dans plusieurs fichiers SCSS qu&#8217;on préfixe avec <code>_</code>: ce sont les <em>&#8220;partials&#8221;</em>. C&#8217;est une norme qui permet au moteur de savoir que pour ce fichier il ne faut pas généré de fichier CSS. Ensuite on utilise la directive <code>import</code> pour inclure ces <em>&#8220;partials&#8221;</em>. C&#8217;est un moyen astucieux d&#8217;<a href="https://github.com/imathis/octopress/blob/master/.themes/classic/sass/screen.scss">organisation</a> !</p>

<p>Toutefois je souhaite modérer ce propos parce même si c&#8217;est une amélioration notable, même séparée dans plusieurs fichiers l&#8217;organisation reste compliquée. J&#8217;avoue avoir eut parfois du mal à m&#8217;y retrouver dans la division choisie dans octopress.</p>

<p>Et les outils habituels de developpement tels firebug font désormais face un problème et ne permettent pas mieux s&#8217;y retrouver puisqu&#8217;ils affichent la réréfence au css compilé. Heureusement il existe une solution: la variable <code>debug_info</code>. Bien entendu <em>octopress</em> est un outils de developpeur et a pensé à <a href="https://github.com/imathis/octopress/pull/1120">ça</a>. Malheuresement je n&#8217;ai pas réussi à faire fonctionner le <a href="https://addons.mozilla.org/fr/firefox/addon/firesass-for-firebug/">plugin</a> firefox sensé compléter <em>&#8220;firebug&#8221;</em>. Celui-ci ne semble plus <a href="https://github.com/nex3/firesass">maintenu</a>.</p>

<p>On peut aussi chercher manuellement le fichier concerné! J&#8217;ai pris l&#8217;habitude d&#8217;utiliser <a href="http://beyondgrep.com/">ack</a> qui est un outil de commodité très intéressant. Malheuresement il m&#8217;a aussi donné du fil à retordre dans ce cas parceque par défaut il exclut justement les fichiers de SASS. Il suffit de modifier son fichier <code>.ackrc</code> et d&#8217;y ajouter par exemple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--type-add
</span><span class='line'>scss=.sass,.scss</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.smknstd.io/images/ack-scss.png" title="ack" alt="ack_sass" /></p>

<h2>Commentaires</h2>

<p>Les commentaires sont toujours une bonne pratique d&#8217;organisation. Malheureusement dans une feuille de style publique, ils ne servent à rien si ce n&#8217;est gêner les performances puisqu&#8217;ils alourdissent le fichier. SASS en tant que préprocesseur est un outils idéal pour résoudre ce problème: on peut commenter autant qu&#8217;on le souhaite sans que ces commentaires n&#8217;apparaissent dans le fichiers CSS produit. #WIN</p>

<p>SCSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// Commentaire SASS</span>
</span><span class='line'><span class="cm">/* Commentaire HTML */</span>
</span><span class='line'><span class="nv">$rouge</span><span class="o">:</span> <span class="mh">#FF0000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">alerte</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-color</span><span class="o">:</span> <span class="nv">$rouge</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Commentaire HTML */</span>
</span><span class='line'>
</span><span class='line'><span class="nt">alerte</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="m">#FF0000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Variables/Opérateurs</h2>

<p>Généralement plusieurs caractéristiques sont redondantes dans les définitions d&#8217;une même feuille de style: les couleurs, les polices, etc. SASS met à disposition le moyen de rendre ces définitions plus dynamiques avec les variables. On attribue une variable à tous les elements qui ont un attribut en comun et le modifier devient très simple. Les variables ont aussi la possibilité de supporter des opérations ! Exemple :</p>

<p>SCSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$largeur</span><span class="o">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">grand</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="nv">$largeur</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">petit</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="nv">$largeur</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">droite</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">gauche</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>minification</h2>

<p>La taille de votre CSS <a href="http://browserdiet.com/fr/#minify-css">compte</a>. Compass met à disposition la possibilité de minifier facilement votre feuille de style dans votre projet. Et c&#8217;est très pratique.</p>

<p><code>output_style = :compressed</code></p>

<p>Bien sûr Compass est un outils qui permet des usages beaucoup plus sophistiqués que les fonctions basiques que j&#8217;ai cité (mixin, génération automatique de sprites, etc). Il faut aussi bien se rappeler que SASS à un cout puisqu&#8217;il complique sensiblement le workflow de developpement !</p>

<h2>BONUS</h2>

<p> Je suis tombé sur cette <a href="http://davidwalsh.name/street-fighter">démo</a> intéressante. J&#8217;ai trouvé que c&#8217;etait une bonne illustration du concept de <em>&#8220;mixin&#8221;</em>. Je l&#8217;ai simplement reproduit avec &#8220;Krusty&#8221;. J&#8217;ai rapidement bricolé deux sprites&#8230; Rien de sensationnel mais voici le résultat:</p>

<p data-height="348" data-theme-id="0" data-slug-hash="ELhdf" data-user="smknstd" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/smknstd/pen/ELhdf'>Krusty&#8217;s fun CSS</a> by smokin studio (<a href='http://codepen.io/smknstd'>@smknstd</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://www.smknstd.io//codepen.io/assets/embed/ei.js"></script>


<h3>Ressources</h3>

<ul>
<li><a href="https://github.com/MarioRicalde/SCSS.tmbundle/tree/SublimeText2">SCSS bundle</a> de coloration syntaxique pour sublime text 2</li>
<li><a href="http://youtu.be/bqfoYaKCYUI?t=5m30s">extrait du speech</a> de Paul Irish sur le workflow SASS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unilignes: l'héritage d'awk dans les langages interprétés modernes]]></title>
    <link href="http://www.smknstd.io/2013/11/11/oneliners/"/>
    <updated>2013-11-11T19:37:00+01:00</updated>
    <id>http://www.smknstd.io/2013/11/11/oneliners</id>
    <content type="html"><![CDATA[<p>Il y a seulement quelques années, lorsque j&#8217;ai commencé à utiliser la commande shell, j&#8217;ai très vite pu apprécié la puissance et l&#8217;ingéniosité de certains outils surtout dans la manipulation courante des données. A ce stade, je savais écrire un programme en C ou en java, mais Xavier, un programmeur expérimenté de 25 ans mon aîné que j&#8217;avais désigné comme mon mentor, a particulièrement attiré mon attention sur cet étrange outil dont j&#8217;ignorais tout: awk.</p>

<p>J&#8217;ai rapidement compris que malgré son apparence rebutante, il allait me devenir indispensable! Associé au <a href="http://doc.cat-v.org/unix/pipes/">&#8220;pipe&#8221;</a>, il est capable de résoudre de véritables casse-têtes en une commande d&#8217;une seule ligne. Bien sûr le prix d&#8217;une ligne c&#8217;est qu&#8217;elle est souvent à rallonge, mais pour de nombreuses opérations elle évite d&#8217;écrire un script. Au moins deux spécificités sont particulièrement appréciées dans Awk:</p>

<ol>
<li>il traite un fichier ligne par ligne</li>
<li>il permet de découper chaque ligne selon un délimiteur et manipuler facilement les champs ainsi découpés</li>
</ol>


<p><em>Attention ces exemples ne sont vraiment pas originaux !</em> Pour toutes les lignes d&#8217;un fichier CSV, on peut garder uniquement la 4ème colonne:</p>

<p><code>gawk -F; '{print $4}' ./exemple.csv</code></p>

<p>Aussi il dispose d&#8217;un système de &#8220;modèle/action&#8221; bien pratique et qui rend par exemple très facile de filtrer les lignes sur certains critères. On peut par exemple facilement exclure certaines lignes (les 3 premières lignes):</p>

<p><code>gawk -F; 'NR&gt;3 { print $4 }' ./exemple.csv</code></p>

<p>Mais awk est aussi un véritable langage de programmation puisqu&#8217;il dispose d&#8217;outils élaborés (tableaux, boucles, types, librairies de fonctions, etc). Awk date de la fin des années 70 et en m’intéressant à la <a href="http://cm.bell-labs.com/cm/cs/awkbook/index.html">littérature de l&#8217;époque</a>, j&#8217;ai réalisé qu&#8217;il avait comme ambition de résoudre des problèmes bien plus sophistiqués que peuvent le faire des unilignes. Évidemment, ces programmes sont aujourd&#8217;hui obsolètes, mais en plus d&#8217;être <a href="https://news.ycombinator.com/item?id=2933058">court</a>, la souplesse et la puissance de son modèle ont fait école. Il est bien connu que certains des <a href="http://en.wikipedia.org/wiki/Interpreted_language">langages interprétés</a> majeurs comme perl et ruby, s&#8217;en sont largement inspiré.</p>

<p>En parcourant cette instructive <a href="http://hyperpolyglot.org/scripting">matrice de comparaison</a>, je me suis rappelé que cela n’était pas toujours bien connu. Les options nécessaires pour simuler le comportement d&#8217;awk sont les mêmes dans les deux langages. En voici l&#8217;énumération et une explication propre:</p>

<blockquote><ul>
<li><p>a: turns on auto-split-mode: this splits the input into an array. The default separator is one (or many) spaces.</p></li>
<li><p>n: makes Perl/Ruby process the input in an implicit while loop around the input, which is processed line-wise: &#8220;as long as there is another line, process it!&#8221;</p></li>
<li><p>e: execute the next command line argument as a program.</p></li>
</ul>
</blockquote>

<p>Spécifiquement pour PERL, la gestion des sauts de lignes:</p>

<blockquote><ul>
<li>l: &#8220;chomps&#8221; the input (which here means: removes newlines if present) from each line, and automatically adds a newline to each output newline</li>
</ul>
</blockquote>

<p>Enfin voici une retranscription d&#8217;un petit programme awk qui compile quelques fonctionnalités généralement appréciées:</p>

<ul>
<li>filtre des données sur un champ donné</li>
<li>numérotation des lignes</li>
<li>selection d&#8217;un champ donné à partir de son numéro d’index</li>
<li>sélection du dernier champ</li>
</ul>


<p><code>gawk -F; ' $1 = "toto" { print NR ";" $4 ";"$NF }' | sort -t";" -k 2 | uniq</code></p>

<p>en PERL</p>

<p><code>perl -F; -lane 'print "$.;$F[4];$F[-1]" if $F[0] = "toto"' | sort -t";" -k 2 | uniq</code></p>

<p>et enfin en RUBY</p>

<p><code>ruby -F; -ane 'print "$.;$F[4];$F.last" if $F[0] = "toto"' | sort -t";" -k 2 | uniq</code></p>

<h3>Ressources</h3>

<ul>
<li><a href="http://www.pement.org/awk/awk1line.txt">le célèbres .txt de Eric Pement sur awk</a></li>
<li><a href="http://www.computerworld.com.au/article/216844/a-z_programming_languages_awk">interview intéressante</a></li>
<li><a href="http://web.archive.org/web/20090602215912/http://sial.org/howto/perl/one-liner/">inestimable ressource sur les &#8220;one-liners&#8221; en PERL</a> (merci à la bonne âme qui l&#8217;a archivée)</li>
<li><a href="http://articles.mongueurs.net/magazines/linuxmag50.html">très bon tutoriel PERL</a> en français</li>
<li><a href="http://tomayko.com/writings/awkward-ruby">article magistrale sur l&#8217;héritage d&#8217;awk dans ruby</a></li>
<li>unilignes <a href="https://twitter.com/rubyoneliner">socials</a> ?!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Survivre aux caractères non-imprimables]]></title>
    <link href="http://www.smknstd.io/2013/10/22/non-printing-characters/"/>
    <updated>2013-10-22T23:56:00+02:00</updated>
    <id>http://www.smknstd.io/2013/10/22/non-printing-characters</id>
    <content type="html"><![CDATA[<p>Lorsqu’on manipule des données, on se heurte bien souvent à quelques subtilités. La première qui me vient à l&#8217;esprit est bien sûr l’encodage des caractères. C&#8217;est un très vaste sujet et je ne me sens pas capable de le résumer sur ce blog. Je me contenterai de citer quelques notes utiles dans la partie ressources, et vous rappeler deux ou trois choses qui m&#8217;ont fait perdre beaucoup de temps:</p>

<ol>
<li>l&#8217;onglet <a href="http://tartarus.org/~simon/putty-snapshots/htmldoc/Chapter4.html#config-translation">&#8220;translation&#8221;</a> de putty</li>
</ol>


<p><img src="http://www.smknstd.io/images/putty.png" title="putty" alt="putty" /></p>

<ol>
<li><p>que généralement rien n’empêche une chaîne de caractère d’être composée de plusieurs &#8220;jeux de caractères&#8221; différents. Bien que difficile à croire j&#8217;ai vécu ce cauchemard éveillé a plusieurs reprise, dans des fichiers la plupart du temps mais aussi des <a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">URLs</a>.</p></li>
<li><p>Détecter l&#8217;encodage d&#8217;un fichier ou d&#8217;une chaîne de caractère sans la connaître peut s&#8217;avérer un vrai casse tête voir impossible. En effet une suite de bits peut avoir un sens dans plusieurs &#8220;charsets&#8221; différents !? Tentez votre chance avec <code>file -i</code> ou lancez vous avec un outils plus sophistiqué basé sur des heuristiques comme <a href="https://github.com/nijel/enca">enca</a>.</p></li>
</ol>


<h2>Détecter les caractères <a href="http://en.wikipedia.org/wiki/Control_character">NON-imprimables</a></h2>

<p>En tant que <a href="http://en.wikipedia.org/wiki/Digital_native">Digital Native</a>, je n&#8217;ai pas spécialement d’expérience avec les <a href="http://en.wikipedia.org/wiki/Computer_terminal">terminaux</a> et je n’ai jamais réussi à m’habituer aux caractères non imprimables dit &#8220;de contrôle&#8221;. Il existe aussi d&#8217;autres réjouissances dont je ne connais pas l’exhaustivité comme par exemple <a href="http://en.wikipedia.org/wiki/Non-breaking_space">ceux-ci</a>. Heureusement dans le monde moderne #NEWSCHOOL ils se font heureusement extrêmement rares.</p>

<p>Par ailleurs, la problématique peut ressembler à celle des <a href="http://en.wikipedia.org/wiki/Newline">sauts de ligne</a>, mais dans une moindre mesure à mon avis car le problème est souvent plus évident à constater puisque plus remarquable et le sujet est nettement mieux documenté.</p>

<p>En écrivant des flux d&#8217;<a href="http://en.wikipedia.org/wiki/Data_integration">intégration de données</a> entre des systèmes hétérogènes (et parfois exotiques), j&#8217;ai souvent rencontré des erreurs inattendues et des comportements anormaux des applications et programmes à leur encontre. Dans l&#8217;investigation d&#8217;un problème, le plus dur est parfois de simplement identifier ces caractères (de merde):</p>

<pre><code>&gt; sqlplus -l -s user/password@INSTANCE @ctrlchar.sql | cat
REVISION DES PRIX 2011 coef 1.107138
reçu le 22/07/2011 mis en application le
22/08/2011 (retour congé)
</code></pre>

<h2>Les outils que j&#8217;aurai aimé connaître depuis le début !</h2>

<p>Heureusement il existe <a href="http://stackoverflow.com/questions/6943928/show-special-characters-in-unix-while-using-less-command">plusieurs</a> moyens de s&#8217;en sortir pour les détecter, les afficher et éventuellement les <a href="http://en.wikipedia.org/wiki/Sed">supprimer</a>. Le tout est de les connaître !</p>

<h3><a href="http://www.thelinuxtips.com/tag/cat-v-command/">cat -v</a></h3>

<pre><code>&gt; sqlplus -l -s user/password@INSTANCE @ctrlchar.sql | cat -v
REVISION DES PRIX 2011 coef 1.107138^M
reM-gu le 22/07/2011 mis en application le
22/08/2011 (retour congM-i)^M
</code></pre>

<h3><a href="http://en.wikipedia.org/wiki/Od_%28Unix%29">od</a>, le magnifique</h3>

<p>Quelle bénédiction le jour ou j&#8217;ai découvert cet outils. Il m&#8217;a définitivement sauvé la vie. Il permet non seulement d&#8217;imprimer à l&#8217;écran l&#8217;<em>in-imprimable</em>, mais il peut s’avérer aussi utile sur de nombreuses autres problématiques comme l&#8217;encodage évoqué précédemment. Selon moi sa grande force est de pouvoir confronter au travers d&#8217;un double affichage (octal/interprétation) et caractère par caractère !</p>

<pre><code>&gt; sqlplus -l -s user/password@INSTANCE @ctrlchar.sql | od -bc

0000000 122 105 126 111 123 111 117 116 040 104 105 123 040 120 122 111
          R   E   V   I   S   I   O   N       D   E   S       P   R   I
0000020 130 040 062 060 061 061 040 143 157 145 146 040 061 056 061 060
          X       2   0   1   1       c   o   e   f       1   .   1   0
0000040 067 061 063 070 015 012 162 145 347 165 040 154 145 040 062 062
          7   1   3   8  \r  \n   r   e 347   u       l   e       2   2
0000060 057 060 067 057 062 060 061 061 040 155 151 163 040 145 156 040
          /   0   7   /   2   0   1   1       m   i   s       e   n
0000100 141 160 160 154 151 143 141 164 151 157 156 040 154 145 012 062
          a   p   p   l   i   c   a   t   i   o   n       l   e  \n   2
0000120 062 057 060 070 057 062 060 061 061 040 050 162 145 164 157 165
          2   /   0   8   /   2   0   1   1       (   r   e   t   o   u
0000140 162 040 143 157 156 147 351 051 015 012 012
          r       c   o   n   g 351   )  \r  \n  \n
0000153
</code></pre>

<h3><a href="http://en.wikipedia.org/wiki/Hex_dump">xxd</a> ou &#8220;Hex dump&#8221;</h3>

<p>Outil très similaire à OD. Je le connais moins bien. Il a peut être des possibilités légèrement différentes.</p>

<h2>Ressources</h2>

<ul>
<li>quelques passages de ce livre en rapport avec le sujet: <a href="http://www.amazon.com/Bad-Data-Handbook-Cleaning-Back/dp/1449321887">bad data</a></li>
<li>si l&#8217;aspect historique de l&#8217;encodage vous intéresse, il y a <a href="http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF">beaucoup</a> à <a href="http://www.cl.cam.ac.uk/~mgk25/unicode.html">dire</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extraction Oracle massive en //: la méthode de lecture partitionnée]]></title>
    <link href="http://www.smknstd.io/2013/09/12/oracle-partitionned-read/"/>
    <updated>2013-09-12T23:58:00+02:00</updated>
    <id>http://www.smknstd.io/2013/09/12/oracle-partitionned-read</id>
    <content type="html"><![CDATA[<p>En tant que défenseur des logiciels libres, il est parfois dur de travailler avec des logiciels propriétaires. Oracle est <a href="http://www.reuters.com/article/2013/02/27/us-ellison-airline-idUSBRE91Q11R20130227">surement</a> le pire éditeur qu&#8217;on puisse imaginer, mais il faut avouer que son SGBD est un outil malgré tout <a href="http://www.xaprb.com/blog/2009/03/13/50-things-to-know-before-migrating-oracle-to-mysql/">sophistiqué</a>.</p>

<p>Lorsqu&#8217;on souhaite exécuter des taches en parallèle, plusieurs outils <a href="http://docs.oracle.com/cd/E11882_01/server.112/e25523/parallel002.htm">plus</a> ou <a href="http://docs.oracle.com/cd/E11882_01/appdev.112/e25788/d_parallel_ex.htm">moins</a> indispensables sont mis à disposition. Toutefois certains besoins peuvent sortir des cas d&#8217;utilisation prévus. J&#8217;ai souhaité traiter massivement les données d&#8217;une table, pour les traiter en lots indépendants sur plusieurs machines différentes. L&#8217;opération d&#8217;extraction des données au travers d&#8217;une seule connexion peut représenter une goulot d’étranglement. J&#8217;ai alors imaginé la méthode décrite ici pour essayer d’accélérer le processus d&#8217;extraction vers un cluster de machines.</p>

<h2>La stratégie</h2>

<p>Au lieu d&#8217;extraire toutes les données d&#8217;une table au travers d&#8217;une seule et unique connexion, puis dans un deuxième temps de partitionner les données. L&#8217;idée consiste à extraire simultanément des différentes parties de la table depuis des connexions différentes (sessions).</p>

<p>Voici une représentation schématique du contexte dans lequel j&#8217;ai pu appliquer ce principe avec succès: le traitement de données s&#8217;effectue dans un cluster de 4 machines.</p>

<p><img src="http://www.smknstd.io/images/oracle_avant_apres.png" title="schema" alt="photo_blocnote" /></p>

<h2>La construction des requêtes</h2>

<p>Pour procéder, je me suis largement inspiré des autres outils procédant en // et notamment de cet étonnant <a href="http://www.jlcomp.demon.co.uk/big_upd.html">article</a> traitant d&#8217;une problématique proche et liée au <a href="http://en.wikipedia.org/wiki/Year_2000_problem">bug de l&#8217;an 2000</a> !? La méthode se base sur la structure avantageuse du champ ROWID (même si le principe reste le même dans toutes les versions, les détails de l&#8217;explication suivante sont valable pour les versions 10 et 11), qui permet non pas d’interroger la table suivant sa définition logique habituelle mais suivant sa représentation dans le moteur de stockage, autrement dit à un plus bas niveau. Il faut utiliser le champ ROWID pour créer des plages de données exclusives et équilibrées au maximum.</p>

<p>Voici un extrait de la documentation officielle:</p>

<blockquote><p>An extended rowid has a four-piece format, OOOOOOFFFBBBBBBRRR:</p>

<p>   OOOOOO: The data object number that identifies the database segment (AAAAao in the example). Schema objects in the same segment, such as a cluster of tables, have the same data object number.</p>

<p>   FFF: The tablespace-relative datafile number of the datafile that contains the row (file AAT in the example).</p>

<p>   BBBBBB: The data block that contains the row (block AAABrX in the example). Block numbers are relative to their datafile, not tablespace. Therefore, two rows with identical block numbers could reside in two different datafiles of the same tablespace.</p>

<p>   RRR: The row in the block.</p></blockquote>

<p>On peut lister l&#8217;identifiant de l&#8217;objet de cette manière:</p>

<p><code>SELECT DATA_OBJECT_ID FROM DBA_OBJECTS WHERE OWNER = 'USER1' AND OBJECT_NAME = 'TABLE1'</code></p>

<p>On peut lister les Datafiles concernés par les données de la table de cette manière:</p>

<p><code>SELECT DISTINCT FILE_ID FROM DBA_EXTENTS WHERE SEGMENT_NAME='TABLE1' AND SEGMENT_TYPE='TABLE'</code></p>

<p>On peut lister les différents &#8220;extents&#8221; concernés par les données de la table de cette manière:</p>

<p><code>SELECT BLOCK_ID, BLOCKS FROM DBA_EXTENTS WHERE SEGMENT_NAME='TABLE1' AND SEGMENT_TYPE='TABLE'</code></p>

<p>Pour la construction de la limite inférieure d&#8217;une plage de ROWID,  on se content d&#8217;un numéro de block fourni par le catalogue (BLOCK_ID) et on renseigne le numéro de ligne par la valeur la plus faible possible : &#8220;AAA&#8221;.</p>

<p>Pour la construction de la limite supérieur, il faut calculer le numéro du dernier block à partir de la taille fournie par le catalogue (BLOCKS) et on renseigne le numéro de ligne par la valeur de la dernière ligne. En théorie cette dernière information n&#8217;est pas si facile à deviner, car le nombre de lignes dans un block dépend de plusieurs facteurs:</p>

<ul>
<li>la taille du block</li>
<li>la taille des lignes</li>
<li>certains paramètres comme PCTFREE qui définissent la taille réservée (pour une possible extension)</li>
</ul>


<p>On peut déterminer la taille des blocks de cette manière:</p>

<p><code>SELECT VALUE FROM V$PARAMETER WHERE NAME LIKE 'DB_BLOCK_SIZE'</code></p>

<p>Pour moi le plus simple consiste a renseigner la valeur la plus élevée possible. Malheureusement cette valeur théorique n&#8217;est pas bien documentée. Sans pouvoir citer de source, j&#8217;ai utilisé &#8220;H//&#8221;.</p>

<p>Notons bien, que cette méthode profite de plusieurs opportunités:</p>

<ul>
<li>bien sûr de la structure du champ ROWID et de son format d&#8217;<a href="http://en.wikipedia.org/wiki/Base64">encodage</a> qui permet non seulement de construire les bornes des plages mais aussi l&#8217;utilisation des opérateurs &#8220;supérieur&#8221; et &#8220;inférieur&#8221; pour chercher à l’intérieur</li>
<li>le fait que l’exécution de la requête ne soit pas gênée par des identifiants &#8220;ROWID&#8221; manquants</li>
</ul>


<p>Au final on écrit autant de requête qu&#8217;on souhaite de partitions de données sous la forme suivante:</p>

<p><code>SELECT * FROM TABLE1 WHERE TABLE1.ROWID BETWEEN 'AAARvrAAEAAAAVpAAA' AND 'AAARvrAAEAAAAVuH//' AND (COL1 &gt; 10)</code></p>

<h2>Quelques variantes</h2>

<p>On peut imaginer partager les données de la table en partitions plus simplement, en parcourant pour chaque requête toute la table mais en se contentant de garder qu&#8217;une partie des données. Évidemment, ce mécanisme se ressentirait directement au niveau des performances.</p>

<p><code>SELECT * FROM TABLE1 WHERE MOD(DBMS_ROWID.ROWID_ROW_NUMBER(TABLE1.ROWID), 4) = 0 AND COL1 &gt; 10</code></p>

<p>Si on dispose de tables partitionnées, alors il est tout a fait imaginable tirer profit des ces partitions en écrivant des requêtes du type:</p>

<p><code>SELECT * FROM TABLE1 PARTITION(PART1) WHERE COL1 &gt; 10</code></p>

<h2>Les limites</h2>

<ol>
<li><p>Cette méthode n&#8217;a d’intérêt que si l&#8217;on n&#8217;a aucune exigence sur la répartition des données entre les différentes partitions. En effet les données ne sont réparties dans les blocks selon aucun critère particulier. S&#8217;il est nécessaire de regrouper les données d&#8217;une quelconque manière (date, clef, hash, etc) cette méthode devient immédiatement inutile ou alors d&#8217;un intérêt très limité puisqu&#8217;il serait nécessaire de rassembler les données.</p></li>
<li><p>Cette méthode est réservée à des extractions basiques et n&#8217;est bien évidemment pas possible sur des requêtes effectuant des jointures entre plusieurs tables ou des opérations de groupement. Par ailleurs des filtres sur les données elle-mêmes sont possibles.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Votre mot de passe est-il trop simple ?]]></title>
    <link href="http://www.smknstd.io/2013/05/19/protect-ya-neck/"/>
    <updated>2013-05-19T14:59:00+02:00</updated>
    <id>http://www.smknstd.io/2013/05/19/protect-ya-neck</id>
    <content type="html"><![CDATA[<p>Utilisez vous le même mot de passe plusieurs fois ? Qui n&#8217;a pas été victime de la <a href="http://en.wikipedia.org/wiki/Password_fatigue">&#8220;fatigue des mots de passe&#8221;</a> ? Je sais bien que les <a href="http://en.wikipedia.org/wiki/Password_manager">Gestionnaires</a> présentent des avantages mais je n&#8217;ai jamais pu me faire à leur defauts. Sans aucune prétention, je vais vous décrire ma facon d&#8217;en retenir un facilement qui soit unique et complexe pour chaque service que j&#8217;utilise sur internet avec une seule règle &#8230; et d&#8217;éviter l&#8217;<a href="http://www.codinghorror.com/blog/2009/05/i-just-logged-in-as-you.html">effroyable</a>!</p>

<p>Mon astuce n&#8217;est qu&#8217;une variante très simple du <a href="http://en.wikipedia.org/wiki/Caesar_cipher">chiffrement par décalage</a>, que j&#8217;ai imaginé en regardant un épisode de  <a href="http://en.wikipedia.org/wiki/The_Wire">&#8220;sur écoute&#8221;</a>. Dans la série, les hommes de main de <a href="http://en.wikipedia.org/wiki/Stringer_Bell">Stringer Bell</a> s&#8217;échangent des numéros de téléphone  par <a href="http://en.wikipedia.org/wiki/Pager">pagers</a>. Ces numéros sont échangés de manière codée, ainsi si le message est intercepté par la police, il ne menera à rien. Dans un souci de commodité, les opérations de cryptage et de décryptage ont été simplifiées: elle se font sans algorithme mathématique mais simplement par une sorte de <a href="http://en.wikipedia.org/wiki/Point_reflection">symétrie</a> appliquée à la disposition d&#8217;un clavier de numérotation téléphonique, et donc très facile à appliquer et à retenir. <em>#NOBRAINER</em></p>

<p>&#8220;if it was a code that involves math, algebra or whatever, these littles yos in the project wouldn&#8217;t be able to follow along. Ain&#8217;t no math to it. It&#8217;s just&#8230; how the phone looks when you look at it.&#8221;</p>

<p><img src="http://www.smknstd.io/images/thewire.png" title="Avon Barksdale's hint on hinding himself" alt="the wire screencap" /></p>

<p>Pour être capable de mémoriser mes mots de passes, j&#8217;ai librement adapté cette idée aux claviers <a href="http://en.wikipedia.org/wiki/AZERTY">AZERTY</a> que j&#8217;utilise la plupart du temps. Evidemment pour que le mot de passe de chaque service soit unique, il faut intégrer un élément propre: le nom du service evidemment ! Ainsi je transpose chaque lettre du nom d&#8217;un service, et elle devient la lettre suivante selon le sens des 3 lignes du clavier (en minuscule). <code>A</code> devient <code>Z</code>, <code>Z</code> devient <code>E</code>, <code>P</code> devient <code>Q</code>, <code>N</code> devient <code>A</code>, etc. Eventuellement il est possible de faire pareil avec les chiffres: <code>1</code> devient <code>2</code>, <code>2</code> devient <code>3</code>, <code>0</code> devient <code>1</code>, etc. Cette façon de faire est facile à mémoriser et à appliquer. #WIN</p>

<p>Aussi pour rendre plus robuste chacun des mots de passe (longeur, majuscules, caracteres spéciaux, etc), je rajoute un &#8220;radical&#8221; commun à tous les mots de passes. Finalement en n&#8217;ayant besoin de retenir que celui-ci, j&#8217;obtiens sans effort, des mots de passe uniques (suffisamment longs et complexes) pour chaque service et surtout dont la reversibilité n&#8217;est pas triviale.</p>

<p>Par exemple si mon radical était <code>!m0nR4d_Cal</code>, cela donnerait:</p>

<ul>
<li><code>!m0nR4d_Caldyzvlpbrtgmpx</code> pour me connecter à stackoverflow.com</li>
<li><code>!m0nR4d_Calyxoyyrt</code> pour me connecter à twitter.com</li>
</ul>


<p><em>J&#8217;ai bien pris soin de finir mon radical par des lettres en minuscule, ainsi l&#8217;analogie entre le nom du service et une partie du mot de passe est plus difficile à faire que quelquechose comme <code>MONRADICALyxoyyrt</code>)</em></p>

<p>Cette méthode n&#8217;est pas parfaite et n&#8217;est qu&#8217;un compromis, d&#8217;ailleurs dans l&#8217;épisode de la série dont je me suis inspiré, <a href="http://en.wikipedia.org/wiki/Roland_Pryzbylewski">&#8220;Prezbo&#8221;</a> déjoue assez facilement le stratagème, probablement parcequ&#8217;il a pu récupérer plusieurs numéros différents et procéder par <a href="http://en.wikipedia.org/wiki/Analogy">analogie</a>. Evidemment je considère que la probabilité que quelqu&#8217;un récupère plusieurs de mes mots de passe (et se donne la peine de retrouver ma facon de faire) est assez faible pour continuer à utiliser cette technique. Aussi par prudence, je l&#8217;exclus pour les services dont j&#8217;éstime la sécurité critique (compte mail, paypal, dropbox etc).</p>

<h4>Ressources</h4>

<ul>
<li><a href="http://www.wired.com/politics/security/commentary/securitymatters/2006/12/72300?currentPage=all">article de 2006</a> dans lequel Bruce Schneier révèle qu&#8217;un des mots de passe les plus courants sur myspace était &#8220;Blink182&#8221;</li>
<li><a href="http://www.amazon.fr/Perfect-Password-Selection-Protection-Authentication/dp/1597490415">182 pages</a> sur le sujet !?</li>
<li><a href="http://www.passwordmeter.com/">password strength meter</a></li>
<li><a href="https://www.grc.com/haystack.htm">how big is your haystack</a></li>
<li><a href="http://stackoverflow.com/questions/98768/should-i-impose-a-maximum-length-on-passwords">WTF</a> !?</li>
<li><a href="http://en.wikipedia.org/wiki/Three_Days_of_the_Condor">un film</a> que j&#8217;aime beaucoup :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuces pour un 'prompt' utile]]></title>
    <link href="http://www.smknstd.io/2013/04/29/prompt/"/>
    <updated>2013-04-29T08:46:00+02:00</updated>
    <id>http://www.smknstd.io/2013/04/29/prompt</id>
    <content type="html"><![CDATA[<p>Vous aimez votre terminal ? Moi aussi. Vous y passez beaucoup trop de temps ? Moi aussi. Qui n&#8217;a pas personnalisé l’affichage de sa commande &#8220;prompt&#8221; ? Dernièrement, j&#8217;ai découvert quelques astuces bien utiles. J&#8217;aurai aimé vous renvoyer vers les articles originaux, pour rendre à Caesar ce qui est à Caesar, mais <a href="http://blog.chron.com/techblog/files/2013/03/googlereaderrip_thumb.jpg">désormais</a> je ne sais plus rechercher correctement dans mes fils rss et j&#8217;ai été incapable de retrouver mes sources.</p>

<h2>Votre terminal supporte l&#8217;unicode</h2>

<p>Et cela peut être très utile pour personnaliser l&#8217;invite et retranscrire des informations complexes avec des pictogrammes. Le rappel de modification dans git décrit plus bas est un bon exemple, mais je suis persuadé qu&#8217;il y a bien d&#8217;autres cas d’utilisation possible parmi le <a href="http://goetter.fr/unicode/">panel</a> disponible.</p>

<h2>Alerte rouge</h2>

<p>Quand on a fini d’exécuter une commande ou un programme, on peut bien sûr interroger son code retour. Mais comme on ne le fait pas systématiquement et surtout lorsqu&#8217;on ne s&#8217;y attend pas, on peut passer à coté et perdre beaucoup de temps. Il est tellement plus simple de récupérer automatiquement cette information et l&#8217;afficher avec un code couleur. #EFFICACE</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">COLOR_RED</span><span class="o">=</span><span class="s2">&quot;\[\e[0;31m\]&quot;</span>
</span><span class='line'><span class="nv">COLOR_NONE</span><span class="o">=</span><span class="s2">&quot;\[\e[0m\]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if </span><span class="nb">test</span> <span class="nv">$?</span> -eq 0
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;${prompt}➔ &quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;${prompt}${COLOR_RED}➔${COLOR_NONE} &quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Afficher la branche courante</h2>

<p>J&#8217;aime GIT. Lorsqu&#8217;on explore une arborescence, savoir qu&#8217;on est dans un &#8220;repository&#8221; peut être très utile. Même quand on le sait, afficher le nom de la branche courante peut éviter bien des ambiguïtés et des erreurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">prompt</span><span class="o">=</span><span class="s2">&quot;\w$(__git_ps1)&quot;</span><span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>N&#8217;oubliez plus de commiter</h2>

<p>Avez vous déjà quitté un &#8220;repository&#8221; avec des modifications en cours sans finir par un &#8220;commit&#8221; ? Moi oui ! En tous cas voici un moyen de ne plus le faire. Il suffit d&#8217;interroger le &#8220;status&#8221; git et d&#8217;afficher un rappel lorsque c&#8217;est nécessaire. Mieux que la couleur, un pictogramme unicode est parfaitement désigné pour cette tâche.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git status 2&gt; /dev/null | grep -c : | awk <span class="s1">&#39;{if ($1 &gt; 0) print &quot;⚡&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Retourner à la racine du repository courant</h2>

<p>Toutes les projets n&#8217;ont pas des arborescences interminables, mais desfois il peut être utile de savoir ou commence un &#8220;repository&#8221;. Ce petit raccourci peut être utile, j&#8217;en suis sûr.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span>git-root<span class="o">=</span><span class="s1">&#39;cd $(git rev-parse --show-toplevel)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Liens utiles</h4>

<ul>
<li>probablement une des <a href="http://mywiki.wooledge.org/BashPitfalls">pages</a> concernant bash les plus utiles de tout l&#8217;internet</li>
<li>une <a href="http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/">interview</a> plutôt intéressante</li>
<li><a href="http://stackoverflow.com/questions/957928/is-there-a-way-to-get-to-the-git-root-directory-in-one-command">stackoverflow</a> a toujours raison</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://www.smknstd.io/2013/02/10/hello-world/"/>
    <updated>2013-02-10T00:19:00+01:00</updated>
    <id>http://www.smknstd.io/2013/02/10/hello-world</id>
    <content type="html"><![CDATA[<p><img src="http://www.smknstd.io/images/sandler.jpg" title="sandler" alt="sandler" /></p>

<p>Bienvenue sur mon blog ! Je dois vous avouer que ce premier post a un peu l’allure d’un réveil difficile. Accoucher de ce blog aura été plus long et douloureux que je l’avais imaginé au départ. J’ai bien pris la mesure de combien l’initiative personnelle peut parfois demander d’efforts. J’ai découvert que je portais beaucoup d’attention <a href="http://littlebigdetails.com/">au souci</a> <a href="http://jessicahische.is/monkeyingaround">du</a> <a href="http://www.creads.org/blog/logos/le-logo-sncf-a-eu-le-droit-a-un-lifting/">détails</a> et pour tout vous dire je crois qu&#8217;il n&#8217;a faillit ne pas voir le jour !</p>

<p>En créant ce blog, c&#8217;est avant tout un signe de reconnaissance que je souhaite donner à toute la communauté qui partage d’inestimables ressources et qui ne cessera jamais de m&#8217;émerveiller. J’avoue être parfois intimidé face à l&#8217;ampleur des connaissances et contributions de ceux qui peuvent apparaitre comme des génies. Heureusement pour moi j’ai appris que même les génies ont <a href="http://en.wikipedia.org/wiki/Ettore_Majorana">leurs</a> propres génies :-) Dans tous les cas, je vais essayer de contribuer avec modestie en partageant mes expériences et ce qui me semble intéressant.</p>

<p>J’estime m&#8217;être intéressé à l&#8217;informatique assez tard. Je suis loin d&#8217;être un de ces <a href="http://www.amazon.com/Underground-Hacking-Obsession-Electronic-Frontier/dp/1863305955">surdoués</a> qui a appris a programmer seul en <a href="http://en.wikipedia.org/wiki/Atari_ST_BASIC">basic</a> à l&#8217;age de 7 ans. L&#8217;amour pour l&#8217;informatique m&#8217;est venu progressivement à l&#8217;université au cours d&#8217;une formation passionnante ou j&#8217;ai emmagasiné en même temps qu&#8217;une bonne dose d&#8217;humilité, une vaste culture informatique. Bien sur j&#8217;en ai oublié en route. <a href="http://en.wikipedia.org/wiki/X.25">Certaines</a> <a href="http://en.wikipedia.org/wiki/Markov_chain">choses</a> volontairement, d&#8217;autres moins. Je n&#8217;ai plus <a href="http://en.wikipedia.org/wiki/Mutual_exclusion">programmé</a> en C depuis des années. J&#8217;ai laissé à l&#8217;abandon la recherche opérationnelle dans laquelle j&#8217;ai investit pourtant <a href="http://fr.wikipedia.org/wiki/Probl%C3%A8me_du_voyageur_de_commerce">beaucoup</a> d&#8217;<a href="http://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos">efforts</a> ! Mais je sais qu&#8217;avec de l&#8217;investissement et du travail, on peut arriver parfois à maîtriser un domaine aussi compliqué puisse-t-il paraître.</p>

<p>Aujourd&#8217;hui, ce blog retranscris aussi ma volonté de me reconvertir et d’expérimenter des technologies de développement web. Chose que j&#8217;ai peu eut l’occasion de faire professionnellement. Jusqu’à maintenant j&#8217;ai passé l&#8217;essentiel de mon temps à mettre en œuvre des systèmes d&#8217;informations de la façon la plus efficiente possible, concevoir des obscures backends, ou faire de l&#8217;administration au travers d&#8217;un terminal. Même vu de l’extérieur, il est facile de voir que l&#8217;industrie du web a révolutionné beaucoup de choses. Dans ma quête actuelle, je suis souvent partagé entre me plonger dans des technologies sophistiquées et passionnantes (git, ruby, javascript, etc) et faire le tri avec certains effets de modes sans réels intérêts (framework, nosql, etc). Si vous avez des conseils ou des remarques à ce sujet, n’hésitez pas !</p>

<p>La première concrétisation de ce blog c&#8217;est qu&#8217;il m&#8217;a permis d&#8217;essayer “octopress”. Un outil très pratique qui permet de générer des pages statiques. Ce qui a tellement d’avantages que je ne saurai pas tous les citer. J’en ai surtout profité pour me familiariser avec tout un tas d&#8217;outils géniaux (rake, markdown, sass, etc).</p>

<p>Si vous voyez quelque-chose qui ne va pas, n’hésitez pas à m’envoyer un email. Bien sûr rien n’est parfait mais je pense m’être concentré sur l&#8217;<a href="https://davidlyness.com/post/email-address-obfuscation">utile</a>. A bientôt.</p>

<h1>TL;DR</h1>

<p>welcome; <a href="https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants">unix</a> + db + web = &lt;3</p>
]]></content>
  </entry>
  
</feed>
